import{l as n,f as s,G as a}from"./framework.36319fc6.js";const e='{"title":"Identity","description":"","frontmatter":{},"headers":[{"level":2,"title":"Signing Key","slug":"signing-key"},{"level":2,"title":"Encryption Key","slug":"encryption-key"}],"relativePath":"guide/identity.md","lastUpdated":1611439066000}',t={},o=a('<h1 id="identity"><a class="header-anchor" href="#identity" aria-hidden="true">#</a> Identity</h1><p>To ensure integrity in the ledger, Concords uses an ECDSA key-pair to sign and verify transactions added to the ledger. The Keys are generated in the users browser using the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API" target="_blank" rel="noopener noreferrer">Web Crypto API</a>, which keeps things decentralized.</p><p>Concords can work along side your exisiting authentication. It&#39;s recommended to keep a Signing Key public, you can store that as a public identifier aginst a user profile. The Signing Secret should be considered private and treated in the same way you would a user password.</p><h2 id="signing-key"><a class="header-anchor" href="#signing-key" aria-hidden="true">#</a> Signing Key</h2><p>To interact with a concords ledger you must provide a valid Signing Key.</p><div class="language-typescript"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> auth <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@concords/core&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> create<span class="token punctuation">,</span> importSigningKey <span class="token punctuation">}</span> <span class="token operator">=</span> auth<span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span>\n  signingKey<span class="token operator">:</span> CryptoKey<span class="token punctuation">,</span>\n  signingSecret<span class="token operator">:</span> CryptoKey<span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> activeSigningKey<span class="token operator">:</span> CryptoKey <span class="token operator">=</span>\n  <span class="token keyword">await</span> <span class="token function">importSigningKey</span><span class="token punctuation">(</span>signingKey<span class="token punctuation">,</span> signingSecret<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre></div><h2 id="encryption-key"><a class="header-anchor" href="#encryption-key" aria-hidden="true">#</a> Encryption Key</h2><p>When creating an identity, concords also returns an encryption key. We haven&#39;t fully purposed it yet, but feel free to use it. We&#39;re exploring ledger user-roles and permissions. ðŸ”‘ ðŸ¤ž</p><div class="language-typescript"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> auth <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@concords/core&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> create <span class="token punctuation">}</span> <span class="token operator">=</span> auth<span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span>\n  signingKey<span class="token operator">:</span> CryptoKey<span class="token punctuation">,</span>\n  signingSecret<span class="token operator">:</span> CryptoKey<span class="token punctuation">,</span>\n\n  encryptionKey<span class="token operator">:</span> CryptoKey<span class="token punctuation">,</span>\n  encryptionSecret<span class="token operator">:</span> CryptoKey<span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre></div>',9);t.render=function(a,e,t,p,c,r){return n(),s("div",null,[o])};export default t;export{e as __pageData};
