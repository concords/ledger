import{l as n,f as a,G as s}from"./framework.36319fc6.js";const t='{"title":"Getting Started","description":"","frontmatter":{},"headers":[{"level":2,"title":"Installation","slug":"installation"},{"level":2,"title":"API","slug":"api"},{"level":3,"title":"Document","slug":"document"},{"level":3,"title":"Concords","slug":"concords"}],"relativePath":"guide/getting-started.md","lastUpdated":1611443835000}',e={},o=s('<h1 id="getting-started"><a class="header-anchor" href="#getting-started" aria-hidden="true">#</a> Getting Started</h1><h2 id="installation"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h2><p>Install the core package</p><div class="language-bash"><pre><code><span class="token function">npm</span> <span class="token function">install</span> @concords/core --save\n<span class="token comment"># yarn add @concords/core</span>\n</code></pre></div><h2 id="api"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2><h3 id="document"><a class="header-anchor" href="#document" aria-hidden="true">#</a> Document</h3><p>Concords is a functional library, documents can be loaded alongside a Signing Key and modified directly in the browser. Transactions are commit to the ledger and then become immutable.</p><p>The ledger can then be exported, imported and processed outside of the application and stored to any storage solution.</p><p>To create a new ledger, you need to pass a <a href="/guide/identity.html">user identity</a></p><div class="language-typescript"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> document <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@concords/core&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> create<span class="token punctuation">,</span> verify<span class="token punctuation">,</span> load <span class="token punctuation">}</span> <span class="token operator">=</span> document<span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> documentTree <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">create</span><span class="token punctuation">(</span>activeSigningKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> isTreeValid <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">verify</span><span class="token punctuation">(</span>documentTree<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> concord <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">load</span><span class="token punctuation">(</span>\n    profile<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token operator">...</span>details<span class="token punctuation">,</span>\n      signingKey<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    activeSigningKey<span class="token punctuation">,</span>\n    documentTree<span class="token punctuation">,</span>\n    <span class="token punctuation">[</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;notes&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;columns&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;custom_data_set&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// table names</span>\n    <span class="token punctuation">(</span>newTree<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Reactive callback</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="concords"><a class="header-anchor" href="#concords" aria-hidden="true">#</a> Concords</h3><p>When interacting with a concords document, all transactions are added to the transaction pool. They are recorded to the database and signed for user integrity, but they do not make up part of the ledger.</p><div class="language-typescript"><pre><code><span class="token comment">// Create schemaless data entries</span>\n<span class="token keyword">await</span> concord<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token string">&#39;Schemaless data&#39;</span><span class="token punctuation">,</span>\n  description<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// get all DB entries</span>\n<span class="token keyword">const</span> todos <span class="token operator">=</span> <span class="token keyword">await</span> concord<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Update exisiting entries</span>\n<span class="token keyword">await</span> concord<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span>todos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  description<span class="token operator">:</span> <span class="token string">&#39;With a due date&#39;</span><span class="token punctuation">,</span>\n  due_date<span class="token operator">:</span> <span class="token string">&#39;30-01-2021&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h4 id="commit"><a class="header-anchor" href="#commit" aria-hidden="true">#</a> Commit</h4><p>To add transactions to the ledger you must perform a commit action. This will use the Proof of Work algorithm to commit the transaction block to the ledger. Once committed, this data is now mimutable and any attempts to manipulate the data will invalidate the ledger.</p><div class="language-typescript"><pre><code><span class="token keyword">await</span> concord<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',16);e.render=function(s,t,e,p,c,i){return n(),a("div",null,[o])};export default e;export{t as __pageData};
